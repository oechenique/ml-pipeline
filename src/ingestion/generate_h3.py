import os
import logging
from pathlib import Path
from typing import List, Dict, Union, Optional, Set
import h3
import pandas as pd
import geopandas as gpd
from shapely.geometry import Polygon, Point, box
import folium
from folium import GeoJson, Marker
import json
from tqdm import tqdm
from dotenv import load_dotenv

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class H3GridGenerator:
    """Genera grids H3 para an√°lisis espacial con soporte multi-resoluci√≥n."""
    
    # Definiciones de resoluci√≥n
    RESOLUTION_CONFIGS = {
        9: {
            'name': 'general',
            'area_km2': 0.1,
            'use_case': 'An√°lisis urbano general, patrones de barrio',
            'min_population': 0,  # Sin l√≠mite
            'max_density': float('inf')  # Sin l√≠mite
        },
        10: {
            'name': 'detailed',
            'area_km2': 0.03,
            'use_case': 'An√°lisis micro-urbano, alta densidad',
            'min_population': 5000,  # Ejemplo: √°reas m√°s pobladas
            'max_density': 15000  # Ejemplo: densidad por km¬≤
        }
    }
    
    def __init__(
        self,
        base_resolution: int = 9,
        output_dir: str = "data/processed/h3",
        auto_resolution: bool = True
    ):
        """
        Inicializa el generador de grids H3.
        
        Args:
            base_resolution: Resoluci√≥n base H3 (default: 9)
            output_dir: Directorio para resultados
            auto_resolution: Si ajustar autom√°ticamente la resoluci√≥n
        """
        self.base_resolution = base_resolution
        self.output_dir = Path(output_dir)
        self.auto_resolution = auto_resolution
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # Validar resoluci√≥n base
        if base_resolution not in self.RESOLUTION_CONFIGS:
            raise ValueError(f"Resoluci√≥n {base_resolution} no soportada")
    
    def determine_resolution(
        self,
        population: float,
        density: float
    ) -> int:
        """
        Determina la resoluci√≥n √≥ptima basada en poblaci√≥n y densidad.
        
        Args:
            population: Poblaci√≥n del √°rea
            density: Densidad poblacional
            
        Returns:
            Resoluci√≥n H3 recomendada
        """
        if not self.auto_resolution:
            return self.base_resolution
            
        # Usar resoluci√≥n 10 para √°reas densas/pobladas
        if (population >= self.RESOLUTION_CONFIGS[10]['min_population'] or
            density >= self.RESOLUTION_CONFIGS[10]['max_density']):
            return 10
            
        return self.base_resolution
    
    def process_polygons_multi_resolution(
        self,
        gdf: gpd.GeoDataFrame,
        population_col: Optional[str] = None,
        area_col: Optional[str] = None
    ) -> Dict[int, gpd.GeoDataFrame]:
        """
        Procesa pol√≠gonos con resoluci√≥n adaptativa.
        
        Args:
            gdf: GeoDataFrame con pol√≠gonos
            population_col: Nombre de columna de poblaci√≥n
            area_col: Nombre de columna de √°rea
            
        Returns:
            Diccionario con GeoDataFrames por resoluci√≥n
        """
        logger.info(f"üîÑ Procesando {len(gdf)} pol√≠gonos con resoluci√≥n adaptativa")
        
        # Inicializar resultados por resoluci√≥n
        results = {res: [] for res in self.RESOLUTION_CONFIGS.keys()}
        
        for idx, row in tqdm(gdf.iterrows(), total=len(gdf)):
            # Calcular densidad si hay datos
            population = row[population_col] if population_col else 0
            area = row.geometry.area if not area_col else row[area_col]
            density = population / area if area > 0 else 0
            
            # Determinar resoluci√≥n
            resolution = self.determine_resolution(population, density)
            
            # Obtener hex√°gonos para el pol√≠gono
            hexagons = self.polygon_to_h3(row.geometry, resolution)
            
            # Crear registros para cada hex√°gono
            for h3_index in hexagons:
                record = {
                    'h3_index': h3_index,
                    'h3_resolution': resolution,
                    'geometry': self.h3_to_polygon(h3_index),
                    'population': population,
                    'density': density
                }
                
                # Agregar nombre del √°rea si est√° especificado
                if area_col and area_col in row:
                    record['area_name'] = row[area_col]
                
                results[resolution].append(record)
        
        # Convertir resultados a GeoDataFrames
        return {
            res: gpd.GeoDataFrame(data, geometry='geometry', crs=gdf.crs)
            for res, data in results.items()
            if data  # Solo incluir resoluciones con datos
        }
    
    def create_multi_resolution_map(
        self,
        results: Dict[int, gpd.GeoDataFrame],
        center: Optional[List[float]] = None,
        filename: str = "h3_multi_resolution_map.html"
    ) -> folium.Map:
        """
        Crea mapa interactivo con hex√°gonos de m√∫ltiples resoluciones.
        
        Args:
            results: Diccionario con GeoDataFrames por resoluci√≥n
            center: Centro opcional del mapa [lat, lon]
            filename: Nombre del archivo HTML
            
        Returns:
            Mapa Folium
        """
        # Determinar centro del mapa
        if center is None:
            # Usar el centro del primer GeoDataFrame disponible
            first_gdf = next(iter(results.values()))
            center = [
                first_gdf.geometry.centroid.y.mean(),
                first_gdf.geometry.centroid.x.mean()
            ]
        
        # Crear mapa base
        m = folium.Map(location=center, zoom_start=11)
        
        # Colores por resoluci√≥n
        colors = {9: 'blue', 10: 'red'}
        
        # Agregar hex√°gonos por resoluci√≥n
        for resolution, gdf in results.items():
            # Crear grupo de capa para la resoluci√≥n
            feature_group = folium.FeatureGroup(
                name=f"Resoluci√≥n {resolution} - {self.RESOLUTION_CONFIGS[resolution]['name']}"
            )
            
            for _, row in gdf.iterrows():
                # Crear pol√≠gono para cada hex√°gono
                folium.Polygon(
                    locations=[(lat, lng) for lng, lat in row.geometry.exterior.coords],
                    color=colors[resolution],
                    fill=True,
                    fill_opacity=0.4,
                    weight=1,
                    tooltip=f"H3 Index: {row['h3_index']}<br>"
                           f"Resoluci√≥n: {resolution}<br>"
                           f"√Årea aprox: {self.RESOLUTION_CONFIGS[resolution]['area_km2']} km¬≤"
                ).add_to(feature_group)
            
            feature_group.add_to(m)
        
        # Agregar control de capas
        folium.LayerControl().add_to(m)
        
        # Guardar mapa
        output_path = self.output_dir / filename
        m.save(str(output_path))
        logger.info(f"üíæ Mapa multi-resoluci√≥n guardado en {output_path}")
        
        return m
    
    def save_multi_resolution_results(
        self,
        results: Dict[int, gpd.GeoDataFrame],
        name: str
    ) -> None:
        """
        Guarda resultados de m√∫ltiples resoluciones.
        
        Args:
            results: Diccionario con GeoDataFrames por resoluci√≥n
            name: Nombre base para los archivos
        """
        for resolution, gdf in results.items():
            # Crear subdirectorio para la resoluci√≥n
            res_dir = self.output_dir / f"resolution_{resolution}"
            res_dir.mkdir(exist_ok=True)
            
            # Guardar GeoJSON
            geojson_path = res_dir / f"{name}_h3_{resolution}.geojson"
            gdf.to_file(geojson_path, driver='GeoJSON')
            
            # Guardar CSV
            csv_path = res_dir / f"{name}_h3_{resolution}.csv"
            gdf[['h3_index', 'h3_resolution', 'population', 'density']].to_csv(
                csv_path,
                index=False
            )
            
            logger.info(f"üíæ Resultados resoluci√≥n {resolution} guardados en {res_dir}")
    
    # Los m√©todos point_to_h3, polygon_to_h3 y h3_to_polygon se mantienen igual,
    # solo agregamos el par√°metro de resoluci√≥n donde sea necesario

def main():
    """Funci√≥n principal para pruebas."""
    try:
        # Cargar datos de prueba
        provinces = gpd.read_file("data/processed/ign/provincias.geojson")
        
        # Inicializar generador con resoluci√≥n adaptativa
        generator = H3GridGenerator(auto_resolution=True)
        
        # Procesar provincias con m√∫ltiples resoluciones
        results = generator.process_polygons_multi_resolution(
            provinces,
            population_col='population',  # Ajustar seg√∫n tus datos
            area_col='nombre'
        )
        
        # Crear mapa multi-resoluci√≥n
        generator.create_multi_resolution_map(results)
        
        # Guardar resultados
        generator.save_multi_resolution_results(results, "provincias")
        
        # Mostrar estad√≠sticas
        for resolution, gdf in results.items():
            logger.info(
                f"Resoluci√≥n {resolution}: {len(gdf)} hex√°gonos generados "
                f"({self.RESOLUTION_CONFIGS[resolution]['name']})"
            )
        
        logger.info("‚úÖ Proceso multi-resoluci√≥n completado exitosamente")
        
    except Exception as e:
        logger.error(f"‚ùå Error en el proceso: {str(e)}")
        raise

if __name__ == "__main__":
    main()